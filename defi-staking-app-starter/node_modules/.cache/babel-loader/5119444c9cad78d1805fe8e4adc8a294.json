{"ast":null,"code":"import _classCallCheck from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js\";\nimport React, { Component } from \"react\";\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  // Airdrop to have a timer that counts down\n  // initialize countdown after customers have staked a certain amount ... 50\n  // timer functionality, countdown, startTimer, state - for time to work...\n  // 1. Step\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20000\n    };\n    _this.timer = 0; // this.startTime = this.startTime.bind(this);\n    // this.countDown = this.countDown.bind(this);\n\n    return _this;\n  } // 2. Create function that takes the number of seconds and make an object with , hours, minutes, seconds property, and returns it\n\n\n  _createClass(Airdrop, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds; // Hours\n\n      hours = Math.floor(secs / (60 * 60));\n      console.log(secs);\n      console.log(60 * 60);\n      console.log(secs / (60 * 60));\n      console.log(Math.floor(secs / (60 * 60)));\n      console.log(hours); // Minutes\n\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes * 60); // Seconds\n\n      var devisor_for_seconds = devisor_for_minutes * 60 - minutes;\n      seconds = Math.ceil(devisor_for_seconds * 60); // Making an object and returning\n\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    } //3. \n    // We want to set the time in state.time variable, we want to update it with secondsToTime function that returns and object, after  componentDidmount function\n    // componentWillMount funtion is called before the page is loaded\n    // componentDidMount function is called after the page is loaded\n    // then after that we want to show that time in render function\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      console.log(this.state.seconds);\n      console.log(this.secondsToTime(this.state.seconds));\n      console.log(timeLeftVar);\n      this.setState({\n        time: timeLeftVar\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, this.state.time.h, \" : \", this.state.time.m, \" : \", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","secs","hours","minutes","Math","floor","console","log","devisor_for_minutes","devisor_for_seconds","ceil","obj","timeLeftVar","secondsToTime","setState","color","h","m","s"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,O;;;AAEF;AACA;AACA;AAGA;AACA,qBAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb,CAHS,CAIV;AACA;;AALU;AAMZ,G,CAED;;;;;kCACcC,I,EAAK;AAIf,UAAIC,KAAJ,EAAWC,OAAX,EAAoBJ,OAApB,CAJe,CAMf;;AACAG,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAR;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK,EAAjB;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,IAAI,KAAK,EAAT,CAAhB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAZe,CAaf;;AACA,UAAIM,mBAAmB,GAAGP,IAAI,IAAI,KAAK,EAAT,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYG,mBAAmB,GAAG,EAAlC,CAAV,CAfe,CAiBf;;AACA,UAAIC,mBAAmB,GAAKD,mBAAmB,GAAG,EAAxB,GAA8BL,OAAxD;AACAJ,MAAAA,OAAO,GAAGK,IAAI,CAACM,IAAL,CAAUD,mBAAmB,GAAG,EAAhC,CAAV,CAnBe,CAsBf;;AACA,UAAIE,GAAG,GAAG;AAEN,aAAKT,KAFC;AAGN,aAAKC,OAHC;AAIN,aAAKJ;AAJC,OAAV;AAOA,aAAOY,GAAP;AACH,K,CAED;AACA;AACA;AACA;AACA;;;;wCACmB;AACf,UAAIC,WAAW,GAAG,KAAKC,aAAL,CAAmB,KAAKhB,KAAL,CAAWE,OAA9B,CAAlB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWE,OAAvB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKM,aAAL,CAAmB,KAAKhB,KAAL,CAAWE,OAA9B,CAAZ;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AAEA,WAAKE,QAAL,CAAc;AAAChB,QAAAA,IAAI,EAAEc;AAAP,OAAd;AACH;;;6BAIO;AACJ,0BACI;AAAK,QAAA,KAAK,EAAE;AAACG,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKlB,KAAL,CAAWC,IAAX,CAAgBkB,CADpB,SAC0B,KAAKnB,KAAL,CAAWC,IAAX,CAAgBmB,CAD1C,SACgD,KAAKpB,KAAL,CAAWC,IAAX,CAAgBoB,CADhE,CADJ;AAKH;;;;EAxEiBvB,S;;AA2EtB,eAAeC,OAAf","sourcesContent":["import React, {Component} from \"react\";\n\nclass Airdrop extends Component{\n    \n    // Airdrop to have a timer that counts down\n    // initialize countdown after customers have staked a certain amount ... 50\n    // timer functionality, countdown, startTimer, state - for time to work...\n\n\n    // 1. Step\n    constructor(){\n        super();\n        this.state = { time: {}, seconds: 20000};\n        this.timer = 0;\n       // this.startTime = this.startTime.bind(this);\n       // this.countDown = this.countDown.bind(this);\n    }\n\n    // 2. Create function that takes the number of seconds and make an object with , hours, minutes, seconds property, and returns it\n    secondsToTime(secs){\n\n\n        \n        let hours, minutes, seconds;\n\n        // Hours\n        hours = Math.floor(secs / (60 * 60));\n        console.log(secs);\n        console.log(60 * 60);\n        console.log(secs / (60 * 60));\n        console.log(Math.floor(secs / (60 * 60)));\n        console.log(hours);\n        // Minutes\n        let devisor_for_minutes = secs % (60 * 60);\n        minutes = Math.floor( devisor_for_minutes * 60);\n\n        // Seconds\n        let devisor_for_seconds = ( devisor_for_minutes * 60) - minutes;\n        seconds = Math.ceil(devisor_for_seconds * 60);\n\n\n        // Making an object and returning\n        let obj = {\n\n            'h': hours,\n            'm': minutes,\n            's': seconds\n        }\n\n        return obj;\n    }\n\n    //3. \n    // We want to set the time in state.time variable, we want to update it with secondsToTime function that returns and object, after  componentDidmount function\n    // componentWillMount funtion is called before the page is loaded\n    // componentDidMount function is called after the page is loaded\n    // then after that we want to show that time in render function\n    componentDidMount(){\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        console.log(this.state.seconds);\n        console.log(this.secondsToTime(this.state.seconds));\n        console.log(timeLeftVar);\n\n        this.setState({time: timeLeftVar});\n    }\n\n\n\n    render(){\n        return(\n            <div style={{color: 'black'}}>\n               {this.state.time.h} : {this.state.time.m} : {this.state.time.s}\n            </div>\n        )\n    }\n\n}\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}