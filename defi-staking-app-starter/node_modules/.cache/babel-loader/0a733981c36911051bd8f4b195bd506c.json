{"ast":null,"code":"import _classCallCheck from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js\";\nimport React, { Component } from \"react\";\n\nvar Airdrop = /*#__PURE__*/function (_Component) {\n  _inherits(Airdrop, _Component);\n\n  // Airdrop to have a timer that counts down\n  // initialize countdown after customers have staked a certain amount ... 50\n  // timer functionality, countdown, startTimer, state - for time to work...\n  // 1. Step\n  function Airdrop() {\n    var _this;\n\n    _classCallCheck(this, Airdrop);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Airdrop).call(this));\n    _this.state = {\n      time: {},\n      seconds: 20\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Start time functionallity\n\n\n  _createClass(Airdrop, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer == 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000); //console.log(this.timer) \n      }\n    } // Countdown function\n\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      // 1. Every call needs to reduce the current time for 1\n      var seconds = this.state.seconds - 1; // update the time\n\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // 2. if the seconds hit 0  clear Interval\n\n      if (seconds == 0) {\n        clearInterval(this.timer); // console.log(this.timer) \n      }\n    } // 2. Create function that takes the number of seconds and make an object with , hours, minutes, seconds property, and returns it\n\n  }, {\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours, minutes, seconds; // Hours\n\n      hours = Math.floor(secs / (60 * 60)); // Minutes\n\n      var devisor_for_minutes = secs % (60 * 60);\n      minutes = Math.floor(devisor_for_minutes / 60); // Seconds\n\n      var devisor_for_seconds = devisor_for_minutes % 60;\n      seconds = Math.ceil(devisor_for_seconds); // Making an object and returning\n\n      var obj = {\n        'h': hours,\n        'm': minutes,\n        's': seconds\n      };\n      return obj;\n    } //3. \n    // We want to set the time in state.time variable, we want to update it with secondsToTime function that returns and object, after  componentDidmount function\n    // componentWillMount funtion is called before the page is loaded\n    // componentDidMount function is called after the page is loaded\n    // then after that we want to show that time in render function\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeftVar\n      });\n    } // Function for stake rewards when stake balance get over 50?? or someth.\n\n  }, {\n    key: \"airdropReleaseTokens\",\n    value: function airdropReleaseTokens() {\n      if (this.props.stakingBalance >= '50000000000000000000') {\n        this.startTimer();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.airdropReleaseTokens();\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, this.state.time.m, \" : \", this.state.time.s);\n    }\n  }]);\n\n  return Airdrop;\n}(Component);\n\nexport default Airdrop;","map":{"version":3,"sources":["/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/Airdrop.js"],"names":["React","Component","Airdrop","state","time","seconds","timer","startTimer","bind","countDown","setInterval","setState","secondsToTime","clearInterval","secs","hours","minutes","Math","floor","devisor_for_minutes","devisor_for_seconds","ceil","obj","timeLeftVar","props","stakingBalance","airdropReleaseTokens","color","m","s"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAGMC,O;;;AAEF;AACA;AACA;AAGA;AACA,qBAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AALS;AAMZ,G,CAED;;;;;iCACY;AACR,UAAG,KAAKF,KAAL,IAAc,CAAd,IAAmB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA3C,EAA6C;AACzC,aAAKC,KAAL,GAAaI,WAAW,CAAC,KAAKD,SAAN,EAAiB,IAAjB,CAAxB,CADyC,CAEzC;AACH;AAGJ,K,CAID;;;;gCACW;AAEP;AACA,UAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC,CAHO,CAIH;;AACJ,WAAKM,QAAL,CAAc;AACVP,QAAAA,IAAI,EAAE,KAAKQ,aAAL,CAAmBP,OAAnB,CADI;AAEVA,QAAAA,OAAO,EAAEA;AAFC,OAAd,EALO,CAUP;;AACA,UAAGA,OAAO,IAAI,CAAd,EAAgB;AACZQ,QAAAA,aAAa,CAAC,KAAKP,KAAN,CAAb,CADY,CAEZ;AACH;AAEJ,K,CAGD;;;;kCACcQ,I,EAAK;AAGf,UAAIC,KAAJ,EAAWC,OAAX,EAAoBX,OAApB,CAHe,CAKf;;AACAU,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,IAAI,KAAK,EAAT,CAAf,CAAR,CANe,CAQf;;AACA,UAAIK,mBAAmB,GAAGL,IAAI,IAAI,KAAK,EAAT,CAA9B;AACAE,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAV,CAVe,CAYf;;AACA,UAAIC,mBAAmB,GAAGD,mBAAmB,GAAG,EAAhD;AACAd,MAAAA,OAAO,GAAGY,IAAI,CAACI,IAAL,CAAUD,mBAAV,CAAV,CAde,CAiBf;;AACA,UAAIE,GAAG,GAAG;AAEN,aAAKP,KAFC;AAGN,aAAKC,OAHC;AAIN,aAAKX;AAJC,OAAV;AAOA,aAAOiB,GAAP;AACH,K,CAED;AACA;AACA;AACA;AACA;;;;wCACmB;AACf,UAAIC,WAAW,GAAG,KAAKX,aAAL,CAAmB,KAAKT,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKM,QAAL,CAAc;AAACP,QAAAA,IAAI,EAAEmB;AAAP,OAAd;AACH,K,CAED;;;;2CAEsB;AAClB,UAAG,KAAKC,KAAL,CAAWC,cAAX,IAA6B,sBAAhC,EAAuD;AACnD,aAAKlB,UAAL;AACH;AAEJ;;;6BAGO;AACJ,WAAKmB,oBAAL;AAEA,0BACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,KAAKxB,KAAL,CAAWC,IAAX,CAAgBwB,CADpB,SAC0B,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,CAD1C,CADJ;AAMH;;;;EA1GiB5B,S;;AA6GtB,eAAeC,OAAf","sourcesContent":["import React, {Component} from \"react\";\n\n\nclass Airdrop extends Component{\n    \n    // Airdrop to have a timer that counts down\n    // initialize countdown after customers have staked a certain amount ... 50\n    // timer functionality, countdown, startTimer, state - for time to work...\n\n\n    // 1. Step\n    constructor(){\n        super();\n        this.state = { time: {}, seconds: 20};\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    // Start time functionallity\n    startTimer(){\n        if(this.timer == 0 && this.state.seconds > 0){\n            this.timer = setInterval(this.countDown, 1000)\n            //console.log(this.timer) \n        }\n\n\n    }\n\n\n\n    // Countdown function\n    countDown(){\n\n        // 1. Every call needs to reduce the current time for 1\n        let seconds = this.state.seconds - 1;\n            // update the time\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds\n        })    \n\n        // 2. if the seconds hit 0  clear Interval\n        if(seconds == 0){\n            clearInterval(this.timer);\n            // console.log(this.timer) \n        }\n\n    }\n\n\n    // 2. Create function that takes the number of seconds and make an object with , hours, minutes, seconds property, and returns it\n    secondsToTime(secs){\n\n    \n        let hours, minutes, seconds;\n\n        // Hours\n        hours = Math.floor(secs / (60 * 60));\n        \n        // Minutes\n        let devisor_for_minutes = secs % (60 * 60);\n        minutes = Math.floor(devisor_for_minutes / 60);\n\n        // Seconds\n        let devisor_for_seconds = devisor_for_minutes % 60;\n        seconds = Math.ceil(devisor_for_seconds);\n\n\n        // Making an object and returning\n        let obj = {\n\n            'h': hours,\n            'm': minutes,\n            's': seconds\n        }\n\n        return obj;\n    }\n\n    //3. \n    // We want to set the time in state.time variable, we want to update it with secondsToTime function that returns and object, after  componentDidmount function\n    // componentWillMount funtion is called before the page is loaded\n    // componentDidMount function is called after the page is loaded\n    // then after that we want to show that time in render function\n    componentDidMount(){\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({time: timeLeftVar});\n    }\n\n    // Function for stake rewards when stake balance get over 50?? or someth.\n\n    airdropReleaseTokens(){\n        if(this.props.stakingBalance >= '50000000000000000000'){\n            this.startTimer();\n        }\n\n    }\n\n\n    render(){\n        this.airdropReleaseTokens()\n\n        return(\n            <div style={{color: 'black'}}>\n               {this.state.time.m} : {this.state.time.s}\n               \n            </div>\n        )\n    }\n\n}\nexport default Airdrop;"]},"metadata":{},"sourceType":"module"}