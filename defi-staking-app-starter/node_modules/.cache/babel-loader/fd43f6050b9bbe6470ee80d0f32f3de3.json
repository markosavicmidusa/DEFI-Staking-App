{"ast":null,"code":"import _regeneratorRuntime from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./NavBar\";\nimport Main from \"./Main\";\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport RWD from '../truffle_abis/RWD.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    // React code goes here\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() // connecting to Etherium\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  alert('No etherium browser detected! You can checkout Metamask !');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() // Getting the account\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rwdBalance, decentralBankData, decentralBank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // bring the contracts\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                //console.log(networkId, 'Network Id')\n                //Load tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                });\n                _context3.next = 15;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 15:\n                tetherBalance = _context3.sent;\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                }); // console.log({balance: tetherBalance})\n\n                _context3.next = 20;\n                break;\n\n              case 19:\n                alert('Tether contract not deployed to detected network');\n\n              case 20:\n                // Load the RWD contract\n                rwdData = RWD.networks[networkId];\n\n                if (!rwdData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n                this.setState({\n                  rwd: rwd\n                });\n                _context3.next = 26;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 26:\n                rwdBalance = _context3.sent;\n                this.setState({\n                  rwdBalance: rwdBalance.toString()\n                }); //console.log({rwdBalance: rwdBalance})\n\n                _context3.next = 31;\n                break;\n\n              case 30:\n                alert('RWD contract not deployed to detected network');\n\n              case 31:\n                // Load Decentral Bank contract\n                decentralBankData = DecentralBank.networks[networkId]; // console.log(decentralBankData.address)\n\n                if (!decentralBankData) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                console.log(decentralBankData);\n                decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                this.setState({\n                  decentralBank: decentralBank\n                }); // UNDEFINED console.log(this.state.decentralBank.address, 'this.state.decentralBank.address')\n\n                console.log(this.state.decentralBank._address, 'this.state.decentralBank._address');\n                _context3.next = 39;\n                return decentralBank.methods.stakingBalance(this.state.account).call();\n\n              case 39:\n                stakingBalance = _context3.sent;\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                }); //console.log({stakingBalance: stakingBalance})\n\n                _context3.next = 44;\n                break;\n\n              case 43:\n                alert('Decentral Bank Contract not deployed to detected network');\n\n              case 44:\n                this.setState({\n                  loading: false\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // two functions one that stakes and the one that unstakes\n    // leverage our decentral bank contract - deposit tokens and unstaking\n    // STAKING FUNCTION:\n    // depositTokens transferfrom...\n    // function approve transaction hash ---\n    // STAKING FUNCTION ?? >> decentralBank.depositTokens(send send transaction hash)\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.stakeTokens = function (amount) {\n      {\n        /* this.setState({loading: true})\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n            this.state.decentralBank.methods.depositeTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => { this.setState({loading: false})\n         }) \n        })\n         */\n      }\n    };\n\n    _this.unstakeTokens = function () {\n      /*this.setState({loading: true})\n      this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) =>{\n          this.setState({loading: false})\n      })*/\n    };\n\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n      {\n        this.state.loading ? content = /*#__PURE__*/React.createElement(\"h3\", {\n          id: \"loader\",\n          className: \"text-center\",\n          style: {\n            margin: '30px'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 19\n          }\n        }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n          tetherBalance: this.state.tetherBalance,\n          rwdBalance: this.state.rwdBalance,\n          stakingBalance: this.state.stakingBalance,\n          stakeTokens: this.stakeTokens(),\n          unstakeTokens: this.unstakeTokens(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 9\n          }\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(NavBar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '100vh'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, content))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/markosavic/Desktop/untitled folder/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","NavBar","Main","Web3","Tether","RWD","DecentralBank","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","_address","stakingBalance","loading","props","stakeTokens","amount","unstakeTokens","content","margin","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport NavBar from \"./NavBar\";\nimport Main from \"./Main\";\nimport Web3 from 'web3'\nimport Tether from '../truffle_abis/Tether.json'\nimport RWD from '../truffle_abis/RWD.json'\nimport DecentralBank from '../truffle_abis/DecentralBank.json'\n\nclass App extends Component{\n    // React code goes here\n    \n\n\n    async componentWillMount(){\n        await this.loadWeb3()\n        await this.loadBlockchainData()\n    }\n\n    // connecting to Etherium\n    async loadWeb3(){\n\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        }else if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            alert('No etherium browser detected! You can checkout Metamask !');\n        }\n    }\n\n    // Getting the account\n    async loadBlockchainData(){\n\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        console.log(accounts)\n        this.setState({account: accounts[0]})\n        \n        // bring the contracts\n        const networkId = await web3.eth.net.getId()\n        //console.log(networkId, 'Network Id')\n        \n        //Load tether contract\n        const tetherData = Tether.networks[networkId]\n        if(tetherData){\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\n            this.setState({tether});\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call()\n            this.setState({tetherBalance: tetherBalance.toString()})\n           // console.log({balance: tetherBalance})\n        }else{\n            alert('Tether contract not deployed to detected network')\n        }\n\n        // Load the RWD contract\n\n        const rwdData= RWD.networks[networkId]\n        if(rwdData){\n\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\n            this.setState({rwd})\n            const rwdBalance = await rwd.methods.balanceOf(this.state.account).call()\n            this.setState({rwdBalance: rwdBalance.toString()})\n            //console.log({rwdBalance: rwdBalance})\n\n        }else{\n            alert('RWD contract not deployed to detected network')\n        }\n\n\n        // Load Decentral Bank contract\n        const decentralBankData = DecentralBank.networks[networkId]\n      // console.log(decentralBankData.address)\n        if(decentralBankData){\n            console.log(decentralBankData)\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n            this.setState({decentralBank})\n            // UNDEFINED console.log(this.state.decentralBank.address, 'this.state.decentralBank.address')\n            console.log(this.state.decentralBank._address, 'this.state.decentralBank._address')\n            const stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\n            this.setState({stakingBalance: stakingBalance.toString()})\n            //console.log({stakingBalance: stakingBalance})\n        }else{\n            alert('Decentral Bank Contract not deployed to detected network')\n        }\n\n        this.setState({loading: false})\n\n    }\n\n    // two functions one that stakes and the one that unstakes\n    // leverage our decentral bank contract - deposit tokens and unstaking\n   \n    // STAKING FUNCTION:\n    // depositTokens transferfrom...\n    // function approve transaction hash ---\n    // STAKING FUNCTION ?? >> decentralBank.depositTokens(send send transaction hash)\n\n   stakeTokens = (amount) => {\n       \n      {/* this.setState({loading: true})\n       this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\n           this.state.decentralBank.methods.depositeTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => { this.setState({loading: false})\n        }) \n    })\n        */}\n    }\n    // UNSTAKING FUNCTION:\n   unstakeTokens = () => {\n        /*this.setState({loading: true})\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash', (hash) =>{\n            this.setState({loading: false})\n        })*/\n    \n    }\n\n\n\n    constructor(props){\n        super(props)\n        this.state = {\n            account: '0x0',\n            tether: {},\n            rwd: {},\n            decentralBank: {},\n            tetherBalance: '0',\n            rwdBalance: '0',\n            stakingBalance: '0',\n            loading: true\n        }\n    }\n\n    render(){\n\n        let content\n        {this.state.loading ? \n        content = <h3 id='loader' className=\"text-center\" style={{margin:'30px'}}>LOADING PLEASE...</h3> :\n        content= \n        <Main \n            tetherBalance={this.state.tetherBalance}\n            rwdBalance = {this.state.rwdBalance}\n            stakingBalance = {this.state.stakingBalance}\n            stakeTokens = {this.stakeTokens()}\n            unstakeTokens = {this.unstakeTokens()}\n        />}\n\n        return(\n            <div>\n                <NavBar account={this.state.account}/>\n                <div className=\"container-fluid mt-5\" >\n                    <div className=\"row\">\n                        <main role='main' className=\"col-lg-12 ml-auto mr-auto\" style={{maxWidth:'600px', minHeight:'100vh'}}>\n                            {content}\n                        </main>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}